import telebot
from telebot import types
import requests
import json
import dpath.util
from datetime import date
import sqlite3
token = '5544422800:AAEXe6nYx9Sp67IzjZUe7cys-2fIedO6XM0'
bot = telebot.TeleBot(token)
city = None
lat = None
lon = None

with sqlite3.connect("weather.db") as db:
    cursor = db.cursor()
    cursor.execute("""CREATE TABLE IF NOT EXISTS weather(
        user_id INTEGER PRIMARY KEY,
        city VARCHAR(40),
        lat REAL,
        lon REAL
    )""")

@bot.message_handler(commands=['start'])
def startmsg(message):
     sg = bot.send_message(message.chat.id, f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!üëã\n\n–Ø - –±–æ—Ç —Å —Å–∞–º–æ–π —Ç–æ—á–Ω–æ–π –ø–æ–≥–æ–¥–æ–π –≤–æ –≤—Å—ë–º —Ç–µ–ª–µ–≥—Ä–∞–º–µ! –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —è –º–æ–≥ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ ‚¨áÔ∏è")
     bot.register_next_step_handler(sg, city_choose)

@bot.message_handler(content_types=['text'])
def weather2(message):
    if message.text == "–£–∑–Ω–∞—Ç—å –ü–æ–≥–æ–¥—É":
        weather(message)
    elif message.text == "–ü–æ–≥–æ–¥–∞ –ù–µ–≤–µ—Ä–Ω–∞—è":
        bot.send_message(message.chat.id, "–ü–æ—à—ë–ª –Ω–∞—Ö—É–π –≤—Å–µ –≤–µ—Ä–Ω–æ–µ.")
    elif message.text == "–°–º–µ–Ω–∏—Ç—å –ì–æ—Ä–æ–¥":
        asa = bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏ –≥–æ—Ä–æ–¥ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(asa, change_city)

def city_choose(message):
    db = sqlite3.connect("weather.db")
    cursor = db.cursor()
    user_id = message.from_user.id
    city = message.text
    resp = requests.get(url=f"https://geocode-maps.yandex.ru/1.x/?apikey=f75f2782-6c2e-438d-bfb3-77be826cff57&format=json&geocode={city}")
    jresp = json.loads(resp.text)
    try:
     coords = jresp.get("response").get("GeoObjectCollection").get("featureMember")
    except AttributeError:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        city = None
    except IndexError:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
        city = None
    item = coords[0]
    coords_final = dpath.util.get(item, "GeoObject/Point/pos")
    words = coords_final.split()
    lat = words[0]
    lon = words[1]
    print(lat, lon)
    try:
        cursor.execute("INSERT INTO weather(user_id, city, lat, lon) VALUES(?, ?, ?, ?);",(user_id, city, lat, lon))
        db.commit()
        cursor.execute("SELECT city FROM weather WHERE user_id = ?;",(user_id,))
        bbb = cursor.fetchone()
        print(bbb)
    except sqlite3.Error as e:
        print("Error ", e)
    bot.send_message(message.chat.id, "–•–æ—Ä–æ—à–æ, —Å–µ–π—á–∞—Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª—é –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã...")
    weather(message)

def weather(message):
    city = None
    lat = None
    lon = None
    user_id = message.from_user.id
    db = sqlite3.connect("weather.db")
    cursor = db.cursor()
    try:
        cursor.execute("SELECT city, lat, lon FROM weather WHERE user_id = ?;",(user_id,))
        pre = cursor.fetchone()
        city = pre[0]
        lat = pre[2]
        lon = pre[1]
    except sqlite3.Error as e:
        print("Error ", e)
    print(city, lat, lon)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn = types.KeyboardButton('–£–∑–Ω–∞—Ç—å –ü–æ–≥–æ–¥—É')
    btn2 = types.KeyboardButton('–°–º–µ–Ω–∏—Ç—å –ì–æ—Ä–æ–¥')
    btn3 = types.KeyboardButton('–ü–æ–≥–æ–¥–∞ –ù–µ–≤–µ—Ä–Ω–∞—è')
    markup.add(btn, btn2, btn3)
    resp = requests.get(url=f"https://api.weather.yandex.ru/v2/forecast?lat={lat}&lon={lon}", headers={"X-Yandex-API-Key" : "8e45e1a6-86fb-44ce-8035-480574a446df"})
    jresp = json.loads(resp.text)
    temp = jresp.get("fact").get("temp")
    pre_condition = jresp.get("fact").get("condition")
    if pre_condition == "overcast":
        condition = "‚òÅÔ∏è –ü–∞—Å–º—É—Ä–Ω–æ"
    elif pre_condition == "partly-cloudy":
        condition = "‚õÖÔ∏è –ú–∞–ª–æ–æ–±–ª–∞—á–Ω–æ"
    elif pre_condition == "clear":
        condition = "‚òÄÔ∏è –Ø—Å–Ω–æ"
    elif pre_condition == "cloudy":
        condition = "üå• –û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏"
    elif pre_condition == "drizzle":
        condition = "üíß –ú–µ–ª–∫–∏–π –¥–æ–∂–¥—å (–º–æ—Ä–æ—Å—å)"
    elif pre_condition == "light-rain":
        condition = "üí¶ –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å"
    elif pre_condition == "rain":
        condition = "üåß –î–æ–∂–¥—å"
    elif pre_condition == "moderate-rain":
        condition = "üåß –£–º–µ—Ä–µ–Ω–Ω–æ —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "heavy-rain":
        condition = "üåß –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "continous-heavy-rain":
        condition = "üåß –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å"
    elif pre_condition == "showers":
        condition = "üåä –õ–∏–≤–µ–Ω—å"
    elif pre_condition == "wet-snow":
        condition = "üå® –°–Ω–µ–≥ —Å –¥–æ–∂–¥—ë–º"
    elif pre_condition == "snow":
        condition = "‚ùÑÔ∏è –°–Ω–µ–≥"
    elif pre_condition == "thunderstorm":
        condition = "üå© –ì—Ä–æ–∑–∞"
    elif pre_condition == "thunderstorm-with-rain":
        condition = "‚õà –î–æ–∂–¥—å —Å –≥—Ä–æ–∑–æ–π"
    feels_like = jresp.get("fact").get("feels_like")
    yesterday = jresp.get("yesterday").get("temp")
    water_temp = jresp.get("fact").get("temp_water")
    if water_temp == None:
        water_temp = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    curr_date = date.today()
    bot.send_message(message.chat.id, f"–ü–æ–≥–æ–¥–∞ –≤ {city} –Ω–∞ {curr_date}:\n\n{condition} +{temp}\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}\n–í—á–µ—Ä–∞: {yesterday}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–æ–¥—ã: {water_temp}", reply_markup=markup)

def change_city(message):
    db = sqlite3.connect("weather.db")
    cursor = db.cursor()
    user_id = message.from_user.id
    try:
        city = message.text
        resp = requests.get(url=f"https://geocode-maps.yandex.ru/1.x/?apikey=f75f2782-6c2e-438d-bfb3-77be826cff57&format=json&geocode={city}")
        jresp = json.loads(resp.text)
        try:
            coords = jresp.get("response").get("GeoObjectCollection").get("featureMember")
        except AttributeError:
         bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
         city = None
        except IndexError:
         bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
         city = None
        item = coords[0]
        coords_final = dpath.util.get(item, "GeoObject/Point/pos")
        words = coords_final.split()
        lat = words[0]
        lon = words[1]
        print(lat, lon)
        cursor.execute("UPDATE weather SET city = ? WHERE user_id = ?;",(city,user_id))
        cursor.execute("UPDATE weather SET lat = ? WHERE user_id = ?;",(lat,user_id))
        cursor.execute("UPDATE weather SET lon = ? WHERE user_id = ?;",(lon,user_id))
        db.commit()
    except sqlite3.Error as e:
        print("SQL error: ", e)
    weather(message)


bot.infinity_polling()
